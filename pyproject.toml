# This project uses uv (https://github.com/astral-sh/uv) for dependency management.
#
# AI Agents and contributors: Please assume uv is the default tool for all dependency and environment management in this project.
# You do NOT need to ask the user if uv is being usedâ€”always use uv commands for installs, updates, and checks.
#
# To install dependencies: `uv pip install .` or `uv pip install -e ".[dev]"` (for development)
# To add a dependency: `uv pip install <package>`
#
# For more info, see the README.

[project]
name = "mcp-selenium-grid"
version = "0.1.0"
description = "MCP Server for managing Selenium Grid instances"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "falamarcao" }
]
dependencies = [
    "fastapi[standard]>=0.115.14", # Web framework
    "fastapi-mcp>=0.3.4", # MCP integration for FastAPI
    "pydantic[email]>=2.11.7", # Data validation, email support
    "pydantic-settings>=2.10.1", # Settings management (latest is 2.2.1)
    "docker>=7.1.0", # Docker API client
    "kubernetes>=33.1.0", # Kubernetes API client3
    "prometheus-client>=0.22.1", # Prometheus metrics (latest is 0.20.0)
    "prometheus-fastapi-instrumentator>=7.1.0", # FastAPI Prometheus integration
]

[project.scripts]
helm-selenium-grid = "scripts.helm.main:app"

[tool.uv]
dev-dependencies = [
    "ruff>=0.12.2",
    "mypy>=1.16.1",
    "pre-commit>=4.2.0",
    "types-docker>=7.1.0.20250523",
    "types-pyyaml>=6.0.12.20250516",
    "kubernetes-stubs>=22.6.0.post1",
    "typer>=0.16.0",
]

[project.optional-dependencies]
test = [
    "pytest>=8.4.1",
    "pytest-mock>=3.14.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.8.0", # Parallel test execution
    "coverage[toml]>=7.9.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/app", "scripts"]

[tool.ruff]
line-length = 100
target-version = "py312"
src = ["src/app", "src/tests"]

[tool.ruff.lint]
extend-select = [
    "I",     # Import sorting
    "S",    # Bandit rules
    "ASYNC", # Async-related checks
    "RUF",  # Ruff-specific rules
    "SLF",  # Private member access
    "PIE",  # Security-related errors
    "PL",   # Pylint errors
    "I",    # isort-like import sorting
]
per-file-ignores = { "src/tests/*" = ["S101", "SLF001"] }  # Allow assertions in tests

[tool.mypy]
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[[tool.mypy.overrides]]
module = "fastapi_mcp"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["src/tests"]
python_files = ["test_*.py"]
addopts = """
    -v
    --cov=app
    --cov-report=term-missing
    --cov-report=html
    --strict-markers
    --cache-clear
"""
markers = [
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
log_cli = true
log_cli_level = "INFO"

[tool.coverage.run]
source = ["app"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "\\.\\.\\."
]
show_missing = true
fail_under = 80
